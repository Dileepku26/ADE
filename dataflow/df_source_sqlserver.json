{
	"name": "df_source_sqlserver",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "ls_azure_sql_server",
						"type": "LinkedServiceReference"
					},
					"name": "sourcesrc"
				},
				{
					"linkedService": {
						"referenceName": "ls_azuresqlserver_target",
						"type": "LinkedServiceReference"
					},
					"name": "target"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "ls_azuresqlserver_target",
						"type": "LinkedServiceReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "srcselect"
				},
				{
					"name": "trgselect"
				},
				{
					"name": "Doesnotexists"
				},
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "lookup1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          customerid as integer,",
				"          customername as string,",
				"          location as string,",
				"          sales as decimal(19,4)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: true,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select customerid,customername, location, sales from customer',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> sourcesrc",
				"source(output(",
				"          customerid as integer,",
				"          customername as string,",
				"          location as string,",
				"          sales as decimal(19,4)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'select customerid,customername, location, sales from customer',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> target",
				"sourcesrc select(mapColumn(",
				"          Src_customerid = customerid,",
				"          Src_customername = customername,",
				"          Src_location = location,",
				"          Src_sales = sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> srcselect",
				"target select(mapColumn(",
				"          Trg_customerid = customerid,",
				"          Trg_customername = customername,",
				"          Trg_location = location,",
				"          Trg_sales = sales",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> trgselect",
				"srcselect, trgselect exists(Src_customerid == Trg_customerid,",
				"     negate:true,",
				"     broadcast: 'auto')~> Doesnotexists",
				"Doesnotexists derive(Flag = 'Inserted') ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          customerid = Src_customerid,",
				"          customername = Src_customername,",
				"          location = Src_location,",
				"          sales = Src_sales,",
				"          Flag",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"srcselect lookup(ERROR_FUNCTION('') == ERROR_FUNCTION(''),",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookup1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'table',",
				"     store: 'sqlserver',",
				"     schemaName: 'dbo',",
				"     tableName: 'customer',",
				"     insertable: true,",
				"     updateable: false,",
				"     deletable: false,",
				"     upsertable: false,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> sink1"
			]
		}
	}
}